/**
 * RoomList.js represents an object used for tracking users and rooms in the socket.io chat
 * author: Tony Gillan
 * version: 0.1
 * date: 27/05/14
 * requires: UserList, Room, User
 */
var UserListModule = require('UserList.js');
var UserModule = require('User.js');
var RoomModule = require('Room.js');


/*************************************************************************************************
 * constructor initialisation functions
 *************************************************************************************************/

/**
 * @method RoomList
 * @description constructor
 * @param roomList Array of Room Objects - 
 * @return new RoomList object
 * @status 
 */
var RoomList = function(roomList) {
	this.VERSION = "RoomList v0.1.001";
	if (roomList===undefined || roomList===null) {
		this.roomList = [];
	} else {
		this.roomList = roomList;
	}
};


/**
 * make internal function public to node
 */
module.exports.RoomList = RoomList;


/*************************************************************************************************
 * static properties
 *************************************************************************************************/


/*************************************************************************************************
 * setter getter functions
 *************************************************************************************************/

RoomList.prototype.getRoomList = function() { return this.roomList; };
RoomList.prototype.getSize = function() { return this.roomList.length; };

RoomList.prototype.setRoomList= function(roomList) { this.roomList = roomList; };


/*************************************************************************************************
 * object support functions
 *************************************************************************************************/

/**
 * @method toString
 * @description will return a text console output version of the fields of this Object
 * @return String
 * @status tested 31/7/14
 */
RoomList.prototype.toString = function() {
	var output = "{";
	if (this.roomList!==undefined && this.roomList!==null) {
		for (var i=0; i<this.roomList.length; i++) {
			output += 'room:' + this.roomList[i].toString() + ',';
		}
	}
	return output + "}";
};

/**
 * @method compareTo
 * @description will return the relative ordering of this RoomList to the paramater
 * @param other is the RoomList object to compare to
 * @return int - null if the param is invalid, or -1, 0, 1 if the param is >, =, < than this.
 * @status to be tested
 */
RoomList.prototype.compareTo = function(other) {
	var output = null;
	if (other!==null && other instanceof RoomList) {
		if (this.parameter1==other.getParameter1()) {
			output = 0;		
		} else if (this.parameter1>other.getParameter1()) {
			output = 1;
		} else {
			output = -1;
		}
	}
	return output;
};

/**
 * @method isEqualTo
 * @description will return whether this RoomList is the same as the paramater
 * @param other is the RoomList object to compare to
 * @return Boolean - null if the param is invalid, or true/false if the param is equal to this.
 * @status to be tested
 */
RoomList.prototype.isEqualTo = function(other) {
	var output = null;
	if (other!==null && other instanceof RoomList) {
		output = (this.parameter1==other.getpParameter1());
	}
	return output;
};

/**
 * @method clone
 * @description will return a shallow copy of this RoomList object
 * @return RoomList object with the same field values as this
 * @status to be tested
 */
RoomList.prototype.clone = function() {
	var output = new RoomList(this.parameter1);
	return output;
};

/**
 * @method toXML
 * @description will return an xml version of this object for export
 * @return String - the xml data to be appended
 * @status tested 31/7/14
 */
RoomList.prototype.toXML = function() {
	var output = '<roomlist>' + '\n';
	if (this.roomList!==undefined && this.roomList!==null) {
		for (var i=0; i<this.roomList.length; i++) {
			output += this.roomList[i].toXML() + '\n';
		}
	}
	return output + '</roomlist>';
};

/**
 * @method fromXML
 * @description will populate the fields of this object from the xml fields
 * @param String - the xml data to be parsed
 * @return Boolean - the result of reading
 * @status tested 31/7/14
 */
RoomList.prototype.fromXML = function(data) {
	var output = false;
	if (data!==undefined && data!==null) {
		//parse roomlist multiple objects
		console.log('_ chatroom.roomlist=' + data);
		for (var key in data) {
			var roomList = data[key];
			console.log('_ chatroom.roomlist roomlist type=' + roomList);
			for (var prop in roomList) {
				console.log('_ chatroom.roomlist roomlist=' + roomList[prop]);
				var room = roomList[prop];
				for (var prop2 in room) {
					console.log('_ chatroom.roomlist room.$=' + room[prop2].$);
					console.log('_ chatroom.roomlist room.$.title=' + room[prop2].$.title);
					console.log('_ Object as String: ' + JSON.stringify(room[prop2]) );
					var roomObj = new RoomModule.Room(null, null, null, null, null);
					roomObj.fromXML(room[prop2]);
					console.log('_ Room created = ' + roomObj.toString());
					this.addRoomObj(roomObj);
				}
			}
		}
		output = true;
	}
	return output;	
};


/*************************************************************************************************
 * main functions
 *************************************************************************************************/

/**
 * @method getDetails
 * @description will return an Object containing general public fields
 * @return Array of Object
 * @status tested 04/08/14
 */
RoomList.prototype.getDetails = function() {
	var output = [];
	if (this.roomList!==undefined && this.roomList!==null) {
		var optionObj = null;
		for (var i=0; i<this.roomList.length; i++) {
			optionObj = {};
			optionObj.value = this.roomList[i].getTitle();	//checked return value from UI
			optionObj.text = optionObj.value + " (" + this.roomList[i].getNumberUsers() + ")";
			optionObj.detail = optionObj.text + " ";
			var userList = this.roomList[i].getUserList();
			for (var j=0; j<userList.length; j++) {
				optionObj.detail += userList[j] + ",";
			}
			output.push(optionObj);
		}
	}
	return output;
}

/**
 * @method initialise
 * @description will return the result of initialising the RoomList Object fields
 * @return String - result of initialisation - "!" at start inidicated error
 * @status tested 04/08/14
 */
RoomList.prototype.initialise = function() {
	var output = null;
	if (RoomModule!==undefined && RoomModule!==null &&
		typeof RoomModule==='object' &&
		RoomModule.Room!==undefined && RoomModule.Room!==null) {
			output = "RoomModule valid. ";
	} else {
		return "!RoomModule invalid";	
	}
	
	//all modules valid
	return output;
};

/**
 * @method getRoom
 * @description will return the matching Room Object by title from list
 * @param title String - the title field of the Room Object to search for
 * @param remove Boolean - whether to remove the matched Room Object if found
 * @return Room Object - matched Room Object
 * @status tested 04/08/14
 */
RoomList.prototype.getRoom = function(title, remove) {
	var output = null;
	if (this.roomList!==null && this.roomList.length>0 && title!==undefined && title!==null) {
		var matchIndex = -1;
		for (var i=0; i<this.roomList.length && output===null; i++) {
			if (this.roomList[i].getTitle()==title) {
				output = this.roomList[i];
				matchIndex = i;
			}
		}
		if (matchIndex>=0 && remove) {
			this.roomList.splice(matchIndex, 1);	
		}
	}
	return output;
};

/**
 * @method addRoom
 * @description will attempt to create a new Room Object and add it to list
 * @param title String - the Room Object field to initialise
 * @param description String - the Room Object field to initialise
 * @param access String - the Room Object field to initialise
 * @param userList Array of String - the Room Object field to initialise
 * @param accessList Array of String - the Room Object field to initialise
 * @return Room Object - new Room Object created
 * @status tested 04/08/14
 */
RoomList.prototype.addRoom = function(title, description, access, userList, accessList) {
	var output = null;
	if (title!==undefined && title!==null) {
		var matchedRoom = this.getRoom(title, false);
		if (matchedRoom===null) {
			output = new RoomModule.Room(title, description, access, userList, accessList);
			this.roomList.push(output);
		} else {
			//dont overwrite existing room
		}	
	}
	return output;
};

/**
 * @method addRoomObj
 * @description will attempt to add Room Object to list
 * @param room Room - the Room Object to add to this list
 * @return Boolean - the result of adding
 * @status tested 04/08/14
 */
RoomList.prototype.addRoomObj = function(room) {
	var output = false;
	if (room!==undefined && room!==null) {
		var title = room.getTitle();
		if (title!==undefined && title!==null) {
			var matchedRoom = this.getRoom(title, false);
			if (matchedRoom===null) {
				this.roomList.push(room);
				output = true;
			} else {
				//dont overwrite existing room
			}
		}
	}
	return output;
};

/**
 * @method getUser
 * @description will return the matching User Object from Rooms
 * @param email String - the email of the User to search for
 * @param remove Boolean - whether to remove the User from the Room if found
 * @return User Object
 * @status tested 04/08/14
 */
RoomList.prototype.getUser = function(email, remove) {
	var output = null;
	if (email!==undefined && email!==null) {
		for (var i=0; i<this.roomList.length && output===null; i++) {
			output = this.roomList[i].getUserByEmail(email, remove);	
		}
	}
	return output;
};
