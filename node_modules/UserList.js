/**
 * UserList.js represents an object used for tracking users and rooms in the socket.io chat
 * author: Tony Gillan
 * version: 0.1
 * date: 27/05/14
 * requires: RoomList, Room, User
 */
var UserModule = require('User.js');
var RoomListModule = require('RoomList.js');
var RoomModule = require('Room.js');


/*************************************************************************************************
 * constructor initialisation functions
 *************************************************************************************************/

/**
 * @method UserList
 * @description constructor
 * @param userList Array of User Objects - 
 * @return new UserList object
 * @status 
 */
var UserList = function(userList) {
	this.VERSION = "UserList v0.1.001";
	if (userList===undefined || userList===null) {
		this.userList = [];
	} else {
		this.userList = userList;
	}
};


/**
 * make internal function public to node
 */
module.exports.UserList = UserList;


/*************************************************************************************************
 * static properties
 *************************************************************************************************/


/*************************************************************************************************
 * setter getter functions
 *************************************************************************************************/

UserList.prototype.getUserList = function() { return this.userList; };
UserList.prototype.getSize = function() { return this.userList.length; };

UserList.prototype.setUserList= function(title) { this.userList = userList; };


/*************************************************************************************************
 * object support functions
 *************************************************************************************************/

/**
 * @method toString
 * @description will return a text console output version of the fields of this Object
 * @return String
 * @status tested 31/7/14
 */
UserList.prototype.toString = function() {
	var output = "{";
	if (this.userList!==undefined && this.userList!==null) {
		for (var i=0; i<this.userList.length; i++) {
			output += 'user:' + this.userList[i].toString() + ',';
		}
	}
	return output + "}";
};

/**
 * @method compareTo
 * @description will return the relative ordering of this UserList to the paramater
 * @param other is the UserList object to compare to
 * @return int - null if the param is invalid, or -1, 0, 1 if the param is >, =, < than this.
 * @status to be tested
 */
UserList.prototype.compareTo = function(other) {
	var output = null;
	if (other!==null && other instanceof UserList) {
		if (this.parameter1==other.getParameter1()) {
			output = 0;		
		} else if (this.parameter1>other.getParameter1()) {
			output = 1;
		} else {
			output = -1;
		}
	}
	return output;
};

/**
 * @method isEqualTo
 * @description will return whether this UserList is the same as the paramater
 * @param other is the UserList object to compare to
 * @return Boolean - null if the param is invalid, or true/false if the param is equal to this.
 * @status to be tested
 */
UserList.prototype.isEqualTo = function(other) {
	var output = null;
	if (other!==null && other instanceof UserList) {
		output = (this.parameter1==other.getpParameter1());
	}
	return output;
};

/**
 * @method clone
 * @description will return a shallow copy of this UserList object
 * @return UserList object with the same field values as this
 * @status to be tested
 */
UserList.prototype.clone = function() {
	var output = new UserList(this.parameter1);
	return output;
};

/**
 * @method toXML
 * @description will return an xml version of this object for export
 * @return String - the xml data to be appended
 * @status tested 31/7/14
 */
UserList.prototype.toXML = function() {
	var output = '<userlist>' + '\n';
	if (this.userList!==undefined && this.userList!==null) {
		for (var i=0; i<this.userList.length; i++) {
			output += this.userList[i].toXML() + '\n';
		}
	}
	return output + '</userlist>';
};

/**
 * @method fromXML
 * @description will populate the fields of this object from the xml fields
 * @param String - the xml data to be parsed
 * @return Boolean - the result of reading
 * @status tested 31/7/14
 */
UserList.prototype.fromXML = function(data) {
	var output = false;
	if (data!==undefined && data!==null) {
		//parse userlist multiple objects
		console.log('_ chatroom.userlist=' + data);
		for (var key in data) {
			var userList = data[key];
			console.log('_ chatroom.userlist userlist type =' + userList);
			for (var prop in userList) {
				console.log('_ chatroom.userlist userlist=' + userList[prop]);
				var user = userList[prop];
				for (var prop2 in user) {
					console.log('_ chatroom.userlist user.$=' + user[prop2].$);
					console.log('_ chatroom.userlist user.$.email=' + user[prop2].$.email);
					console.log('_ Object as String: ' + JSON.stringify(user[prop2]) );
					var userObj = new UserModule.User(null, null, null, null, null, null,
																 null, null, null);
					userObj.fromXML(user[prop2]);
					console.log('_ User created = ' + userObj.toString());
					this.addUserObj(userObj);
				}
			}
		}
		output = true;
	}	
	return output;	
};


/*************************************************************************************************
 * main functions
 *************************************************************************************************/

/**
 * @method getDetails
 * @description will return an Object containing general public fields
 * @return Array of Object
 * @status to be tested
 */
UserList.prototype.getDetails = function() {
	var output = [];
	if (this.userList!==undefined && this.userList!==null) {
		var optionObj = null;
		for (var i=0; i<this.userList.length; i++) {
			optionObj = {};
			optionObj.value = this.userList[i].getUsername();	//what is checked for
			optionObj.text = optionObj.value + " (" + this.userList[i].getAccess() + ")";	//visible
			output.push(optionObj);
		}
	}
	return output;
}

/**
 * @method initialise
 * @description will return the result of initialising the UserList Object fields
 * @return String - result of initialisation - "!" at start inidicated error
 * @status to be tested
 */
UserList.prototype.initialise = function(UserModule) {
	var output = null;
	if (UserModule!==undefined && UserModule!==null &&
		typeof UserModule==='object' &&
		UserModule.User!==undefined && UserModule.User!==null) {
			output = "UserModule valid. ";
	} else {
		return "!UserModule invalid";	
	}
	return output;
};

/**
 * @method getUserByName
 * @description will search for a User in the list by username
 * @param username String - is the username field of the User to search for
 * @param remove Boolean - whether to remove the User Object if found
 * @return User Object - matched User from list
 * @status tested 04/08/14
 */
UserList.prototype.getUserByName = function(username, remove) {
	var output = null;
	if (this.userList!==null && this.userList.length>0 && username!==undefined && username!==null) {
		var matchIndex = -1;
		for (var i=0; i<this.userList.length && output===null; i++) {
			if (this.userList[i].getUsername()==username) {
				output = this.userList[i];
				matchIndex = i;
			}
		}
		if (matchIndex>=0 && remove) {
			this.userList.splice(matchIndex, 1);	
		}
	}
	return output;
};

/**
 * @method getUserByEmail
 * @description will search for a User in the list by email
 * @param email String - is the email field of the User to search for
 * @param remove Boolean - whether to remove the User Object if found
 * @return User Object - matched User from list
 * @status tested 04/08/14
 */
UserList.prototype.getUserByEmail = function(email, remove) {
	var output = null;
	if (this.userList!==null && this.userList.length>0 && email!==undefined && email!==null) {
		var matchIndex = -1;
		for (var i=0; i<this.userList.length && output===null; i++) {
			if (this.userList[i].getEmail()==email) {
				output = this.userList[i];
				matchIndex = i;
			}
		}
		if (matchIndex>=0 && remove) {
			this.userList.splice(matchIndex, 1);	
		}
	}
	return output;
};

/**
 * @method addUser
 * @description will create a new User Object and add to the list
 * @param email String - is the email field of the User to set
 * @param password String - is the password field of the User to set
 * @param username String - is the username field of the User to set
 * @param firstName String - is the firstName field of the User to set
 * @param lastName String - is the lastName field of the User to set
 * @param access String - is the access field of the User to set
 * @param lastOn String - is the lastOn field of the User to set
 * @param lastRoom String - is the lastRoom field of the User to set
 * @param loggedIn String - is the loggedIn field of the User to set
 * @return User Object - created User in list
 * @status tested 04/08/14
 */
UserList.prototype.addUser = function(email, password, username, firstName, lastName,
												  access, lastOn, lastRoom, loggedIn) {
	var output = null;
	if (email!==undefined && email!==null) {
		var matchedUser = this.getUserByEmail(email, false);
		if (matchedUser===null) {
			output = new UserModule.User(email, password, username, firstName, lastName,
												  access, lastOn, lastRoom, loggedIn);
			this.userList.push(output);
		} else {
			//dont overwrite existing room
		}	
	}
	return output;
};

/**
 * @method addUserObj
 * @description will add a User Object to the list
 * @param user User Object - is the User to add if not already in list
 * @return Boolean - true if User added to list
 * @status tested 04/08/14
 */
UserList.prototype.addUserObj = function(user) {
	var output = false;
	if (user!==undefined && user!==null) {
		var email = user.getEmail();
		if (email!==undefined && email!==null) {
			var matchedUser = this.getUserByEmail(email, false);
			if (matchedUser===null) {
				this.userList.push(user);
				output = true;
			} else {
				//dont overwrite existing room
			}
		}
	}
	return output;
};
