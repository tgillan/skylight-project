/**
 * ChatRoom.js represents an object used for tracking users and rooms in the socket.io chat
 * author: Tony Gillan
 * version: 0.1
 * date: 27/05/14
 * requires: RoomList, UserList, Room, User
 */
var UserListModule = require('UserList.js');
var UserModule = require('User.js');
var RoomListModule = require('RoomList.js');
var RoomModule = require('Room.js');


/*************************************************************************************************
 * static fields external to class
 *************************************************************************************************/
var SERVER_TITLE = "Chat Room";
var SERVER_DESC = "The default Chat Room";

var ACCESS_BLOCKED = "blocked";
var ACCESS_GUEST = "guest";
var ACCESS_USER = "user";
var ACCESS_MOD = "mod";
var ACCESS_ADMIN = "admin";
var ACCESS_LEVEL = [ ACCESS_BLOCKED,
							 ACCESS_GUEST,
							 ACCESS_USER,
							 ACCESS_MOD,
							 ACCESS_ADMIN
						];

var SYS_EMAIL = "tgillan@gmail.com";
var SYS_PASS = "testtest"; //"TestP@ssw0rd3268-";
var SYS_USERNAME = "Admin User";
var SYS_FNAME = "System";
var SYS_LNAME = "Administrator";
var SYS_ACCESS = ACCESS_ADMIN;

var TEST_EMAIL = "test@gmail.com";
var TEST_PASS = "testtest"; //"TestP@ssw0rd3268-";
var TEST_USERNAME = "Test User";
var TEST_FNAME = "Test";
var TEST_LNAME = "User";
var TEST_ACCESS = ACCESS_USER;

var ROOM_BLOCK_TITLE = "quarantine";
var ROOM_BLOCK_DESC = "Waiting for access";
var ROOM_BLOCK_ACCESS = ACCESS_GUEST;
var ROOM_DEF_TITLE = "foyer";
var ROOM_DEF_DESC = "Default Room - waiting to change rooms";
var ROOM_DEF_ACCESS = ACCESS_USER;
	

/*************************************************************************************************
 * constructor initialisation functions
 *************************************************************************************************/


/**
 * @method ChatRoom
 * @description constructor
 * @return new ChatRoom object
 * @status 
 */
var ChatRoom = function(title, description) {
	this.VERSION = "ChatRoom v0.1.001";
	
	if (title===undefined || title===null) { 
		this.title = SERVER_TITLE;
	} else {
		this.title = title;
	}
	if (description===undefined || description===null) { 
		this.description = SERVER_DESC;
	} else {
		this.description = description;
	}
	this.userList = null;	//UserList
	this.roomList = null;	//RoomList
	this.activeUserList = null;	//Array of String email
	this.quarantineRoom = null;	//Room
	this.defaultRoom = null;	//Room
	this.adminUser = null;	//User
};


/**
 * make internal function public to node
 */
module.exports.ChatRoom = ChatRoom;


/*************************************************************************************************
 * static properties
 *************************************************************************************************/


/*************************************************************************************************
 * setter getter functions
 *************************************************************************************************/

ChatRoom.prototype.getTitle = function() { return this.title; };
ChatRoom.prototype.getDescription = function() { return this.description; };
ChatRoom.prototype.getUserList = function() { return this.userList; };
ChatRoom.prototype.getRoomList = function() { return this.roomList; };
ChatRoom.prototype.getActiveUserList = function() { return this.activeUserList; };
ChatRoom.prototype.getQuarantineRoom = function() { return this.quarantineRoom; };
ChatRoom.prototype.getDefaultRoom = function() { return this.defaultRoom; };
ChatRoom.prototype.getAdminUser = function() { return this.adminUser; };

ChatRoom.prototype.setTitle = function(title) { this.title = title; };
ChatRoom.prototype.setDescription = function(description) { this.description = description; };
ChatRoom.prototype.setUserList = function(userList) { this.userList = userList; };
ChatRoom.prototype.setRoomList= function(roomList) { this.roomList = roomList; };
ChatRoom.prototype.setActiveUserList = function(activeUserList) { this.activeUserList = activeUserList; };
ChatRoom.prototype.setQuarantineRoom = function(quarantineRoom) { this.quarantineRoom = quarantineRoom; };
ChatRoom.prototype.setDefaultRoom = function(defaultRoom) { this.defaultRoom = defaultRoom; };
ChatRoom.prototype.setAdminUser = function(adminUser) { this.adminUser = adminUser; };


/*************************************************************************************************
 * object support functions
 *************************************************************************************************/

/**
 * @method toString
 * @description will return a text console output version of the fields of this Object
 * @return String
 * @status 
 */
ChatRoom.prototype.toString = function() {
	var output = "{" +
		' version="' + this.VERSION +
		' title="' + this.title + '"' +
		' description="' + this.description + '"';
	
	output += ' quarantineroom="';
	if (this.quarantineRoom!==undefined && this.quarantineRoom!==null) {
		output += this.quarantineRoom.getTitle() + '"';
	} else {
		output += 'null"';
	}
	
	output += ' defaultroom="';
	if (this.defaultRoom!==undefined && this.defaultRoom!==null) {
		output += this.defaultRoom.getTitle() + '"';
	} else {
		output += 'null"';
	}
	
	output += ' adminuser="';
	if (this.adminUser!==undefined && this.adminUser!==null) {
		output += this.adminUser.getEmail() + '"';
	} else {
		output += 'null"';
	}

	if (this.userList!==undefined && this.userList!==null) {
		output += ' userList=' + this.userList.toString() + '\n';
	} else {
		output += ' userList=null';
	}
	if (this.roomList!==undefined && this.roomList!==null) {
		output += ' roomList=' + this.roomList.toString() + '\n';
	} else {
		output += ' roomList=null';
	}
	if (this.activeUserList!==undefined && this.activeUserList!==null) {
		output += ' activeUserList=';
		for (var i=0; i<this.activeUserList.length; i++) {
			output += this.activeUserList[i] + ',';
		}
		output += '\n';
	}	
	
	return output + "}";
};

/**
 * @method compareTo
 * @description will return the relative ordering of this ChatRoom to the paramater
 * @param other is the ChatRoom object to compare to
 * @return int - null if the param is invalid, or -1, 0, 1 if the param is >, =, < than this.
 * @status to be tested
 */
ChatRoom.prototype.compareTo = function(other) {
	var output = null;
	if (other!==null && other instanceof ChatRoom) {
		if (this.parameter1==other.getParameter1()) {
			output = 0;		
		} else if (this.parameter1>other.getParameter1()) {
			output = 1;
		} else {
			output = -1;
		}
	}
	return output;
};

/**
 * @method isEqualTo
 * @description will return whether this ChatRoom is the same as the paramater
 * @param other is the ChatRoom object to compare to
 * @return Boolean - null if the param is invalid, or true/false if the param is equal to this.
 * @status to be tested
 */
ChatRoom.prototype.isEqualTo = function(other) {
	var output = null;
	if (other!==null && other instanceof ChatRoom) {
		output = (this.parameter1==other.getParameter1());
	}
	return output;
};

/**
 * @method clone
 * @description will return a shallow copy of this ChatRoom object
 * @return ChatRoom object with the same field values as this
 * @status to be tested
 */
ChatRoom.prototype.clone = function() {
	var output = new ChatRoom(this.parameter1);
	return output;
};

/**
 * @method toXML
 * @description will return an xml version of this object for export
 * @return String - the xml data to be appended
 * @status tested 04/08/14
 */
ChatRoom.prototype.toXML = function() {
	var output = '<chatroom' +
			' version="' + this.VERSION + '"' +
			' title="' + this.title + '"' +
			' description="' + this.description + '"';

	if (this.quarantineRoom!==undefined && this.quarantineRoom!==null) {
		output += ' quarantineroom="' + this.quarantineRoom.getTitle() + '"';
	}
	if (this.defaultRoom!==undefined && this.defaultRoom!==null) {
		output += ' defaultroom="' + this.defaultRoom.getTitle() + '"';
	}
	if (this.adminUser!==undefined && this.adminUser!==null) {
		output += ' adminuser="' + this.adminUser.getEmail() + '"';
	}			
	output += '>' + '\n';

	if (this.userList!==undefined && this.userList!==null) {
		output += this.userList.toXML() + '\n';
	}
	if (this.roomList!==undefined && this.roomList!==null) {
		output += this.roomList.toXML() + '\n';
	}
	if (this.activeUserList!==undefined && this.activeUserList!==null) {
		output += '<activeuserlist>';
		for (var i=0; i<this.activeUserList.length; i++) {
			output += '<user email="' + this.activeUserList[i] + '"></user>' + '\n';
		}
		output += '</activeuserlist>' + '\n';
	}		
	return output + "</chatroom>";
};

/**
 * @method fromXML
 * @description will populate the fields of this object from the xml fields
 * @param String - the xml data to be parsed
 * @return Boolean - the result of reading
 * @status tested 04/08/14
 */
ChatRoom.prototype.fromXML = function(data) {
	var output = false;
	if (data!==undefined && data!==null) {
		//test result of xml parse
		console.log('_ chatroom=' + data);
		console.log('_ chatroom.$=' + data.$);
		console.log('_ chatroom.$.version=' + data.$.version);
		
		if (data.$.title===undefined || data.$.title===null) { 
			this.title = SERVER_TITLE;
		} else {
			this.title = data.$.title;
		}
		if (data.$.description===undefined || data.$.description===null) { 
			this.description = SERVER_DESC;
		} else {
			this.description = data.$.description;
		}
		
		this.roomList = new RoomListModule.RoomList(null);
		var result = this.roomList.fromXML(data.roomlist);
		this.userList = new UserListModule.UserList(null);
		var result2 = this.userList.fromXML(data.userlist);
	
		this.quarantineRoom = this.roomList.getRoom(data.$.quarantineroom, false);
		this.defaultRoom = this.roomList.getRoom(data.$.defaultroom, false);
		this.adminUser = this.userList.getUserByEmail(data.$.adminuser, false);	
		
		
		//# todo
		this.activeUserList = null;
		
		output = true;
	}
	return output;	
};


/*************************************************************************************************
 * main functions
 *************************************************************************************************/

/**
 * @method getDetails
 * @description will return an object containing general public fields
 * @return Object
 * @status tested 04/08/14
 */
ChatRoom.prototype.getDetails = function() {
	var output = { version:this.VERSION,
						title:this.title,
						description:this.description,
						userlist:this.userList.getDetails(),
						roomlist:this.roomList.getDetails()
	};
	return output;
}

/**
 * @method initialise
 * @description will initialise sub classes and fields for this class
 * @return String - result of operation to be output to console
 * @status tested
 */
ChatRoom.prototype.initialise = function() {
	var output = null;
	if (RoomListModule!==undefined && RoomListModule!==null &&
		typeof RoomListModule==='object' &&
		RoomListModule.RoomList!==undefined && RoomListModule.RoomList!==null) {
			output = "RoomListModule valid. ";
	} else {
		return "!RoomListModule invalid";	
	}
	if (RoomModule!==undefined && RoomModule!==null &&
		typeof RoomModule==='object' &&
		RoomModule.Room!==undefined && RoomModule.Room!==null) {
			output += "RoomModule valid. ";
	} else {
		return "!RoomModule invalid";	
	}
	if (UserListModule!==undefined && UserListModule!==null &&
		typeof UserListModule==='object' &&
		UserListModule.UserList!==undefined && UserListModule.UserList!==null) {
			output += "UserListModule valid. ";
	} else {
		return "!UserListModule invalid";	
	}
	if (UserModule!==undefined && UserModule!==null &&
		typeof UserModule==='object' &&
		UserModule.User!==undefined && UserModule.User!==null) {
			output += "UserModule valid. ";
	} else {
		return "!UserModule invalid";	
	}
	
	//all modules valid
	this.userList = new UserListModule.UserList(null);
	this.roomList = new RoomListModule.RoomList(null);
	this.activeUserList = [];
	this.quarantineRoom = this.roomList.addRoom(ROOM_BLOCK_TITLE, ROOM_BLOCK_DESC,
															  ROOM_BLOCK_ACCESS, null, null);
	this.defaultRoom = this.roomList.addRoom(ROOM_DEF_TITLE, ROOM_DEF_DESC,
														  ROOM_DEF_ACCESS, null, null);
	this.adminUser = this.userList.addUser(SYS_EMAIL, SYS_PASS, SYS_USERNAME, SYS_FNAME,
														SYS_LNAME, SYS_ACCESS, null, null, false);
	this.userList.addUser(TEST_EMAIL, TEST_PASS, TEST_USERNAME, TEST_FNAME, TEST_LNAME,
								 TEST_ACCESS, null, null, false);
	return output;
};

/**
 * @method isAbleToLogin
 * @description will check to see if user is valid and able to login
 * @param email String - unique email of the user to check against
 * @param password String - password of the user to check against 
 * @return Boolean - result of operation to be output to console
 * @status tested
 */
ChatRoom.prototype.isAbleToLogin = function(email, password) {
	var output = "!(001) email or password is invalid";
	if (email!==undefined && email!==null && password!==undefined && password!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			if (password==user.getPassword()) {
				if (user.getAccess()!="blocked") {
					if (user.getLoggedIn()===false) {
						output = "yes";
					} else {
						output = "!(005) user is already logged in";	
					}
				} else {
					output = "!(004) user is blocked";	
				}
			} else {
				output = "!(003) incorrect password";		
			}
		} else {
			output = "!(002) no valid user found";	
		}
	}
	return output;
};

/**
 * @method login
 * @description will check to see if user is valid and able to login
 * @param email String - unique email of the user to check against
 * @param password String - password of the user to check against 
 * @return String - result of operation to be output to console
 * @status tested 04/08/14
 */
ChatRoom.prototype.login = function(email, password) {
	var output = -1;
	if (email!==undefined && email!==null && password!==undefined && password!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			if (password==user.getPassword() &&
				 user.getAccess()!="blocked" &&
				 user.getLoggedIn()===false) {
				//update User
				user.setLoggedIn(true);
				user.setLastOn("" + new Date());
				
				//update Room
				var lastRoom = user.getLastRoom();
				if (lastRoom===undefined || lastRoom===null) {
					//set default room
					user.setLastRoom(this.defaultRoom.getTitle());
					this.defaultRoom.addUser(user);
					output = '#login() user added to default room';
				} else {
					//use previous room if available
					var room = this.roomList.getRoom(lastRoom);
					if (room===undefined || room===null) {
						//set default room
						user.setLastRoom(this.defaultRoom.getTitle());
						this.defaultRoom.addUser(user);
						output = '#login() user added to default room as previous room no longer exists';
					} else {
						room.addUser(user);
						output = '#login() user added to previous room';
					}
				}
			} else {
				output = '!login() could not get access';
			}
		} else {
			output = '!login() could not find user';	
		}
	} else {
		output = '!login() invalid email or password';
	}
	return output;
};

/**
 * @method logout
 * @description will log user out
 * @param email String - unique email of the user to logout
 * @return Boolean - result of operation to be output to console 
 * @status to be implemented
 */
ChatRoom.prototype.logout = function(email) {
	var output = false;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			//update user profile
			user.setLoggedIn(false);
			user.setLastOn("" + Date(Date.now()));
			//user.setLastRoom();
			
			//remove user from current room
			this.roomList.getUser(email, true);
			
			//remove user from overall active list
			if (this.activeUserList!==undefined && this.activeUserList!==null) {
				var matchIndex = -1;
				for (var i=0; i<this.activeUserList.length && matchIndex==-1; i++) {
					if (this.activeUserList[i]==email) {
						matchIndex = i;		
					}
				}
				if (matchIndex>=0) {
					this.activeUserList.splice(matchIndex, 1);
				}
			}
		}
	}
	return output;
};

/**
 * @method changepassword
 * @description will attempt to update password if oldPassword and newPassword meet
 * validation requirements.
 * @param email String - unique email of the user to change
 * @param oldPassword String - the existing password of the user to match against
 * @param newPassword String - the new password of the user to change to
 * @return Boolean - result of operation to be output to console 
 * @status to be implemented
 */
ChatRoom.prototype.changepassword = function(email, oldPassword, newPassword) {
	var output = false;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			
			//# 
			
		}
	}
	return output;
};

/**
 * @method resetpassword
 * @description will attempt to reset password via email account
 * @param email String - unique email of the user to reset
 * @return Boolean - result of operation to be output to console
 * @status to be implemented
 */
ChatRoom.prototype.resetpassword = function(email) {
	var output = false;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			
			//# 
			
		}
	}
	return output;
};

/**
 * @method deleteaccount
 * @description will attempt to delete account attached to email
 * @param email String - unique email of the user to delete
 * @return Boolean - result of operation to be output to console
 * @status to be implemented
 */
ChatRoom.prototype.deleteaccount = function(email) {
	var output = false;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			
			//# 
			
		}
	}
	return output;
};

/**
 * @method changedetails
 * @description will attempt to update profile details
 * @param email String - unique email of the user to change
 * @param username String - username of the user to change
 * @param firstName String - first name of the user to change
 * @param lastName String - last name of the user to change
 * @return Boolean - result of operation to be output to console
 * @status to be implemented
 */
ChatRoom.prototype.changedetails = function(email, username, firstName, lastName) {
	var output = false;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			
			//# 
			
		}
	}
	return output;
};

/**
 * @method list
 * @description will output a general system and user activity list
 * @return Object - result of operation to be output to console as Object
 * @status to be implemented
 */
ChatRoom.prototype.list = function() {
	var output = null;
	var detailsObj = this.getDetails();
	return output;
};

/**
 * @method changeRoom
 * @description will try to reallocate User to proposed Room
 * @param email String - unique email of the user to change
 * @param room String - the title of the Room the User needs to change to 
 * @return Boolean - result of operation
 * @status to be implemented
 */
ChatRoom.prototype.changeRoom = function(email, room) {
	var output = false;
	if (email!==undefined && email!==null && room!==undefined && room!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			var newRoomObj = this.roomList.getRoom(room, false); 
			if (newRoomObj!==undefined && newRoomObj!==null) {
				//1st remove from current Room if exists
				var currentRoomObj = this.roomList.getRoom(this.getCurrentRoom(email), false);
				if (currentRoomObj!==undefined && currentRoomObj!==null) {
					currentRoomObj.getUserByEmail(email, true);	
				}
				
				//now add to new Room
				output = newRoomObj.addUser(user);
				user.setLastRoom(room);
			}
		}
	}
	return output;
};

/**
 * @method getCurrentRoom
 * @description will get the current room for a user
 * @param email String - unique email of the user to get
 * @return String - the title of the Room that the user is in or was last seen in
 * @status tested 04/08/14
 */
ChatRoom.prototype.getCurrentRoom = function(email) {
	var output = null;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			output = user.getLastRoom();
		}
	}
	return output;
};

/**
 * @method getUserDetails
 * @description will get fields from User as and Object to populate socket
 * @param email String - unique email of the user to get
 * @return Object - the user details in simple Object form
 * @status tested 04/08/14
 */
ChatRoom.prototype.getUserDetails = function(email) {
	var output = null;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			output = user.getDetails();
		}
	}
	return output;
}

/**
 * @method setUserActive
 * @description will set the User to be active in the active list and profile details
 * @param email String - unique email of the user to get
 * @return Boolean - result of operation
 * @status tested 04/08/14
 */
ChatRoom.prototype.setUserActive = function(email) {
	var output = false;
	if (email!==undefined && email!==null) {
		var user = this.userList.getUserByEmail(email, false);
		if (user!==undefined && user!==null) {
			user.setLoggedIn(true);
			var matched = false;
			for (var i=0; i<this.activeUserList.length && !matched; i++) {
				if (this.activeUserList==email) {
					matched = true;	//already active, so do nothing	
				}
			}
			if (!matched) {
				this.activeUserList.push(email);	
			}
			output = true;
		}
	}
	return output;
};

/**
 * @method getNumActiveUsers
 * @description will get the number of users active in the system
 * @param email String - unique email of the user to get
 * @return Object - the user details in simple Object form
 * @status tested 04/08/14
 */
ChatRoom.prototype.getNumActiveUsers = function() {
	var output = 0;
	if (this.activeUserList!==undefined && this.activeUserList!==null) {
		output = this.activeUserList.length;	
	}
	return output;
}
