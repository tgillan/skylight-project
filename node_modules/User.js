/**
 * User.js represents an object used for tracking users and rooms in the socket.io chat
 * author: Tony Gillan
 * version: 0.1
 * date: 27/05/14
 * requires: Room
 */
var RoomModule = require('Room.js');


/*************************************************************************************************
 * constructor initialisation functions
 *************************************************************************************************/

/**
 * @method User
 * @description constructor
 * @param email String - the room title to be displayed to the user
 * @param password String - about the room text to be displayed to the user
 * @param username String - the level of access required to enter room (guest,user,mod,admin)
 * @param firstName String - the first name of the user
 * @param lastName String - the surname of the user
 * @param access String - the level of access granted to user (blocked,guest,user,mod,admin)
 * @param lastOn String - the details of last visit by user to this system
 * @param lastRoom String - the title of the Room the user currently is in or was last seen in
 * @param loggedIn Boolean - wether the user currently is logged in or not
 * @return new User object
 * @status 
 */
var User = function(email, password, username, firstName, lastName, access, lastOn, lastRoom, loggedIn) {
	this.VERSION = "User v0.1.001";
	
	this.email = email;
	this.password = password;
	this.username = username;
	this.firstName = firstName;
	this.lastName = lastName;
	this.access = access;
	this.lastOn = null;
	this.lastRoom = lastRoom;
	this.loggedIn = loggedIn;
};


/**
 * make internal function public to node
 */
module.exports.User = User;


/*************************************************************************************************
 * static properties
 *************************************************************************************************/


/*************************************************************************************************
 * setter getter functions
 *************************************************************************************************/

User.prototype.getEmail = function() { return this.email; };
User.prototype.getPassword = function() { return this.password; };
User.prototype.getUsername = function() { return this.username; };
User.prototype.getFirstName = function() { return this.firstName; };
User.prototype.getLastName = function() { return this.lastName; };
User.prototype.getAccess = function() { return this.access; };
User.prototype.getLastOn = function() { return this.lastOn; };
User.prototype.getLastRoom= function() { return this.lastRoom; };
User.prototype.getLoggedIn= function() { return this.loggedIn; };

User.prototype.setEmail = function(email) { this.email = email; };
User.prototype.setPassword = function(password) { this.password = password; };
User.prototype.setUsername = function(username) { this.username = username; };
User.prototype.setFirstName = function(firstName) { this.firstName = firstName; };
User.prototype.setLastName = function(lastName) { this.lastName = lastName; };
User.prototype.setAccess = function(access) { this.access = access; };
User.prototype.setLastOn = function(lastOn) { this.lastOn = lastOn; };
User.prototype.setLastRoom = function(lastRoom) { this.lastRoom = lastRoom; };
User.prototype.setLoggedIn = function(loggedIn) { this.loggedIn = loggedIn; };


/*************************************************************************************************
 * object support functions
 *************************************************************************************************/

/**
 * @method toString
 * @description will return a text console output version of the fields of this Object
 * @return String
 * @status tested 31/7/14 
 */
User.prototype.toString = function() {
	var output = "{" +	
		' version="' + this.VERSION + '"' +
		' email="' + this.email + '"' +
		' password="' + this.password + '"' +
		' username="' + this.username + '"' +
		' firstname="' + this.firstName + '"' +
		' lastname="' + this.lastName + '"' +
		' access="' + this.access + '"' +
		' laston="' + this.lastOn + '"' +
		' lastroom="' + this.lastRoom + '"' +
		' loggedin="' + this.loggedIn + '"';		
	return output + "}";
};

/**
 * @method compareTo
 * @description will return the relative ordering of this User to the paramater
 * @param other is the User object to compare to
 * @return int - null if the param is invalid, or -1, 0, 1 if the param is >, =, < than this.
 * @status to be tested
 */
User.prototype.compareTo = function(other) {
	var output = null;
	if (other!==null && other instanceof User) {
		if (this.email==other.getEmail()) {
			output = 0;		
		} else if (this.email>other.getEmail()) {
			output = 1;
		} else {
			output = -1;
		}
	}
	return output;
};

/**
 * @method isEqualTo
 * @description will return whether this User is the same as the paramater
 * @param other is the User object to compare to
 * @return Boolean - null if the param is invalid, or true/false if the param is equal to this.
 * @status to be tested
 */
User.prototype.isEqualTo = function(other) {
	var output = null;
	if (other!==null && other instanceof User) {
		output = (this.email==other.getEmail());
	}
	return output;
};

/**
 * @method clone
 * @description will return a shallow copy of this User object
 * @return User object with the same field values as this
 * @status to be tested
 */
User.prototype.clone = function() {
	var output = new User(this.email, this.password, this.username, this.firstName,
								 this.lastName, this.access, this.lastOn, this.lastRoom, this.loggedIn);
	return output;
};

/**
 * @method toXML
 * @description will return an xml version of this object for export
 * @return String - the xml data to be appended
 * @status tested 31/7/14
 */
User.prototype.toXML = function() {
	var output = '<user' +
			' version="' + this.VERSION + '"' +
			' email="' + this.email + '"' +
			' password="' + this.password + '"' +
			' username="' + this.username + '"' +
			' firstname="' + this.firstName + '"' +
			' lastname="' + this.lastName + '"' +
			' access="' + this.access + '"' +
			' laston="' + this.lastOn + '"' +
			' lastroom="' + this.lastRoom + '"' +
			' loggedin="' + this.loggedIn + '"';
	output += '>';
	return output + "</user>";
};

/**
 * @method fromXML
 * @description will populate the fields of this object from the xml fields
 * @param String - the xml data to be parsed
 * @return Boolean - the result of reading
 * @status tested 31/7/14
 */
User.prototype.fromXML = function(data) {
	var output = false;
	if (data!==undefined && data!==null && data.$!==undefined && data.$!==null) {
		this.email = data.$.email;
		this.password = data.$.password;
		this.username = data.$.username;
		this.firstName = data.$.firstname;
		this.lastName = data.$.lastname;
		this.access = data.$.access;
		this.lastOn = data.$.laston;
		this.lastRoom = data.$.lastroom;
		this.loggedIn = data.$.loggedin;
		output = true;
	}
	return output;	
};


/*************************************************************************************************
 * main functions
 *************************************************************************************************/

/**
 * @method getDetails
 * @description will return an Object containing general public fields
 * @return Object
 * @status tested 04/08/14
 */
User.prototype.getDetails = function() {
	var output = { email:this.getEmail(),
						username:this.getUsername(),
						firstname:this.getFirstName(),
						lastname:this.getLastName(),
						access:this.getAccess(),
						laston:this.getLastOn(),
						lastroom:this.getLastRoom(),
						loggedin:this.getLoggedIn()
	};
	return output;
}

