/**
 * Room.js represents an object used for tracking users and rooms in the socket.io chat
 * author: Tony Gillan
 * version: 0.1
 * date: 27/05/14
 * requires: UserList,  User
 */
var UserListModule = require('UserList.js');
var UserModule = require('User.js');


/*************************************************************************************************
 * constructor initialisation functions
 *************************************************************************************************/

/**
 * @method Room
 * @description constructor
 * @param title String - the room title to be displayed to the user
 * @param description String - about the room text to be displayed to the user
 * @param access String - the level of access required to enter room (guest,user,mod,admin)
 * @param userList Array of String - the Users in this Room (listed by email)
 * @param accessList Array of String - Users who have access to this Room (liosted by email)
 * @return new Room object
 * @status 
 */
var Room = function(title, description, access, userList, accessList) {
	this.VERSION = "Room v0.1.001";
	
	this.ACCESS_BLOCKED = "blocked";
	this.ACCESS_GUEST = "guest";
	this.ACCESS_USER = "user";
	this.ACCESS_MOD = "mod";
	this.ACCESS_ADMIN = "admin";
	this.ACCESS_LEVEL = [ this.ACCESS_BLOCKED,
								 this.ACCESS_GUEST,
								 this.ACCESS_USER,
								 this.ACCESS_MOD,
								 this.ACCESS_ADMIN
								];
	
	this.title = title;
	this.description = description;
	this.access = access;
	this.userList = userList;
	if (this.userList!==undefined && this.userList!==null) {
		this.userList = userList;
	} else {
		this.userList = [];	
	}
	if (this.accessList!==undefined && this.accessList!==null) {
		this.accessList = accessList;
	} else {
		this.accessList = [];	
	}
};


/**
 * make internal function public to node
 */
module.exports.Room = Room;


/*************************************************************************************************
 * static properties
 *************************************************************************************************/


/*************************************************************************************************
 * setter getter functions
 *************************************************************************************************/

Room.prototype.getTitle = function() { return this.title; };
Room.prototype.getDescription = function() { return this.description; };
Room.prototype.getAccess = function() { return this.access; };
Room.prototype.getUserList = function() { return this.userList; };
Room.prototype.getAccessList = function() { return this.accessList; };

Room.prototype.setTitle = function(title) { this.title = title; };
Room.prototype.setDescription = function(description) { this.description = description; };
Room.prototype.setAccess = function(access) { this.access = access; };
Room.prototype.setUserList = function(userList) { this.userList = userList; };
Room.prototype.setAccessList = function(accessList) { this.accessList = accessList; };


/*************************************************************************************************
 * object support functions
 *************************************************************************************************/

/**
 * @method toString
 * @description will return a text console output version of the fields of this Object
 * @return String
 * @status 
 */
Room.prototype.toString = function() {
	var output = "{";
	output += 'version="' + this.VERSION + '"' +
			' title="' + this.title + '"' +
			' description="' + this.description + '"' +
			' access="' + this.access + '"';
	if (this.userList!==undefined && this.userList!==null) {
		output += ' userlist=[';
		for (var i=0; i<this.userList.length; i++) {
			output += this.userList[i] + ',';
		}
		output += ']';
	}
	if (this.accessList!==undefined && this.accessList!==null) {
		output += ' accesslist=[';
		for (var i=0; i<this.accessList.length; i++) {
			output += this.accessList[i] + ',';
		}
		output += ']';
	}
		
	return output + "}";
};

/**
 * @method compareTo
 * @description will return the relative ordering of this Room to the paramater
 * @param other is the Room object to compare to
 * @return int - null if the param is invalid, or -1, 0, 1 if the param is >, =, < than this.
 * @status to be tested
 */
Room.prototype.compareTo = function(other) {
	var output = null;
	if (other!==null && other instanceof Room) {
		if (this.parameter1==other.getParameter1()) {
			output = 0;		
		} else if (this.parameter1>other.getParameter1()) {
			output = 1;
		} else {
			output = -1;
		}
	}
	return output;
};

/**
 * @method isEqualTo
 * @description will return whether this Room is the same as the paramater
 * @param other is the Room object to compare to
 * @return Boolean - null if the param is invalid, or true/false if the param is equal to this.
 * @status to be tested
 */
Room.prototype.isEqualTo = function(other) {
	var output = null;
	if (other!==null && other instanceof Room) {
		output = (this.parameter1==other.getpParameter1());
	}
	return output;
};

/**
 * @method clone
 * @description will return a shallow copy of this Room object
 * @return Room object with the same field values as this
 * @status to be tested
 */
Room.prototype.clone = function() {
	var output = new Room(this.parameter1);
	return output;
};

/**
 * @method toXML
 * @description will return an xml version of this object for export
 * @return String - the xml data to be appended
 * @status tested 31/7/14
 */
Room.prototype.toXML = function() {
	var output = '<room' +
			' version="' + this.VERSION + '"' +
			' title="' + this.title + '"' +
			' description="' + this.description + '"' +
			' access="' + this.access + '"';
	output += '>';
	
	if (this.userList!==undefined && this.userList!==null) {
		output += '<userlist>';
		for (var i=0; i<this.userList.length; i++) {
			output += '<user email="' + this.userList[i] + '"></user>';
		}
		output += '</userlist>' + '\n';
	}
	if (this.accessList!==undefined && this.accessList!==null) {
		output += '<accesslist>';
		for (var i=0; i<this.accessList.length; i++) {
			output += '<user email="' + this.accessList[i] + '"></user>';
		}
		output += '</accesslist>' + '\n';
	}
	
	return output + "</room>";
};

/**
 * @method fromXML
 * @description will populate the fields of this object from the xml fields
 * @param String - the xml data to be parsed
 * @return Boolean - the result of reading
 * @status tested 31/7/14
 */
Room.prototype.fromXML = function(data) {
	var output = false;
	if (data!==undefined && data!==null && data.$!==undefined && data.$!==null) {
		this.title = data.$.title;
		this.description = data.$.description;
		this.access = data.$.access;
		this.userList = [];
		if (data.userlist!==undefined && data.userlist!==null) {
			console.log("data.userlist = " + JSON.stringify(data.userlist));
			for (var i=0; i<data.userlist.length; i++) {
				if (data.userlist[i]!==undefined && data.userlist[i]!==null) {
					if (data.userlist[i].user!==undefined && data.userlist[i].user!==null) {
						for (var j=0; j<data.userlist[i].user.length; j++) {
							if (data.userlist[i].user[j].$!==undefined &&
								 data.userlist[i].user[j].$!==null) {
								if (data.userlist[i].user[j].$.email!==undefined &&
									 data.userlist[i].user[j].$.email!==null) {
									console.log("data.userlist[" + i + "].user[" + j + "].$.email = " +
										JSON.stringify(data.userlist[i].user[j].$.email));
									this.userList.push("" + data.userlist[i].user[j].$.email);
								}
							}
						}
					}
				}
			}
		}
		this.accessList = [];
		if (data.accesslist!==undefined && data.accesslist!==null) {
			for (var i=0; i<data.accesslist.length; i++) {
				if (data.accesslist[i]!==undefined && data.accesslist[i]!==null &&
					 data.accesslist[i].user!==undefined && data.accesslist[i].user!==null) {
					for (var j=0; j<data.accesslist[i].user.length; j++) {
						if (data.accesslist[i].user[j].$!==undefined &&
							 data.accesslist[i].user[j].$!==null &&
							 data.accesslist[i].user[j].$.email!==undefined &&
							 data.accesslist[i].user[j].$.email!==null) {
							this.accessList.push("" + data.accesslist[i].user[j].$.email);
						}
					}
				}
			}
		}
		output = true;
	}
	return output;	
};


/*************************************************************************************************
 * main functions
 *************************************************************************************************/

/**
 * @method getDetails
 * @description will return an Object containing general public fields
 * @return Object
 * @status tested 04/08/14
 */
Room.prototype.getDetails = function() {
	var output = { title:this.getTitle(),
						description:this.Description(),
						access:this.getAccess(),
						lastname:this.getLastName(),
						users:this.userList
	};
	return output;
}

/**
 * @method getUserByEmail
 * @description will return the User from list with matching email field
 * @param email String - is the User email field to search for in list
 * @param remove Boolean - whether to remove matched User from list if found
 * @return User Object - the matched User
 * @status tested 04/08/14
 */
Room.prototype.getUserByEmail = function(email, remove) {
	var output = null;
	if (email!==undefined && email!==null) {
		var matchIndex = -1;
		for (var i=0; i<this.userList.length && output===null; i++) {
			if (this.userList[i]==email) {
				output = this.userList[i];
				matchIndex = i;
			}
		}
		if (matchIndex>=0 && remove) {
			this.userList.splice(matchIndex, 1);	
		}
	}
	return output;
};

/**
 * @method addUser
 * @description will add a User Object to the list
 * @param user User Object - is the User to add if not already in list
 * @return Boolean - true if User added to list
 * @status tested 04/08/14
 */
Room.prototype.addUser = function(user) {
	var output = false;
	if (user!==undefined && user!==null) {
		var email = user.getEmail();
		var match = this.getUserByEmail(email);
		if (match!==undefined && match!==null) {
			//user already exists in Room	
		} else {
			this.userList.push(email);
		}
		output = true;
	}
	return output;
};

/**
 * @method getNumberUsers
 * @description will return the total number of User Objects in list
 * @return int - 0: if no users or invalid list
 * @status tested 04/08/14
 */
Room.prototype.getNumberUsers = function() {
	var output = 0;
	if (this.userList!==undefined && this.userList!==null) {
		output = this.userList.length;
	}
	return output;
};

